<?xml version="1.0" encoding="UTF-8"?>
<infinispan xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:infinispan:config:5.1" xsi:schemaLocation="urn:infinispan:config:5.1 http://www.infinispan.org/schemas/infinispan-config-5.1.xsd">
    <global>
        <globalJmxStatistics enabled="true" jmxDomain="infinispan" allowDuplicateDomains="true" />
        <transport
                transportClass="org.infinispan.remoting.transport.jgroups.JGroupsTransport"
                clusterName="infinispan-hibernate-cluster"
                distributedSyncTimeout="50000"
                strictPeerToPeer="false">
            <!-- Note that the JGroups transport uses sensible defaults if no configuration property is defined. -->
            <properties>
                <!--<property name="configurationFile" value="jgroups-tcp.xml"/>-->
                <property name="configurationFile" value="jgroups-tcp.xml"/>
            </properties>
            <!-- See the JGroupsTransport javadocs for more flags -->
        </transport>
    </global>

    <default>
    </default>

    <!-- An alternative configuration for entity/collection caching that uses replication instead of invalidation -->
    <namedCache name="replicated-iBook-entity">
        <clustering mode="replication">
            <stateRetrieval fetchInMemoryState="false" timeout="60000"/>
            <sync replTimeout="20000"/>
        </clustering>
        <!--<locking isolationLevel="READ_COMMITTED" concurrencyLevel="1000"
                 lockAcquisitionTimeout="15000" useLockStriping="false"/>-->
        <!-- Eviction configuration.  WakeupInterval defines how often the eviction thread runs, in milliseconds.
0 means the eviction thread will never run.  A separate executor is used for eviction in each cache. -->
        <eviction maxEntries="10000" strategy="LRU"/>
        <expiration maxIdle="100000" wakeUpInterval="5000"/>
        <lazyDeserialization enabled="true"/>
        <!--<transaction transactionMode="TRANSACTIONAL" autoCommit="false"
                     lockingMode="OPTIMISTIC"/>-->
        <loaders passivation="false" shared="false" preload="false">
            <loader class="org.infinispan.loaders.cluster.ClusterCacheLoader"
                    fetchPersistentState="false"
                    ignoreModifications="false" purgeOnStartup="false">
                <properties>
                    <property name="remoteCallTimeout" value="20000"/>
                </properties>
            </loader>
        </loaders>
    </namedCache>

    <!-- A query cache that replicates queries. Replication is asynchronous. -->
    <namedCache name="replicated-iBook-query">
        <clustering mode="replication">
            <stateRetrieval fetchInMemoryState="false" timeout="60000"/>
            <sync replTimeout="20000"/>
        </clustering>
        <!--<locking isolationLevel="READ_COMMITTED" concurrencyLevel="1000"
                 lockAcquisitionTimeout="15000" useLockStriping="false"/>-->
        <!-- Eviction configuration.  WakeupInterval defines how often the eviction thread runs, in milliseconds.
0 means the eviction thread will never run.  A separate executor is used for eviction in each cache. -->
        <eviction maxEntries="10000" strategy="LRU"/>
        <expiration maxIdle="100000" wakeUpInterval="5000"/>
        <lazyDeserialization enabled="true"/>
        <!--<transaction transactionMode="TRANSACTIONAL" autoCommit="false"
                     lockingMode="OPTIMISTIC"/>-->
        <loaders passivation="false" shared="false" preload="false">
            <loader class="org.infinispan.loaders.cluster.ClusterCacheLoader"
                    fetchPersistentState="false"
                    ignoreModifications="false" purgeOnStartup="false">
                <properties>
                    <property name="remoteCallTimeout" value="20000"/>
                </properties>
            </loader>
        </loaders>
    </namedCache>

    <namedCache name="timestamps">
        <clustering mode="replication">
            <async/>
        </clustering>
        <!--<locking isolationLevel="READ_COMMITTED" concurrencyLevel="1000"
                 lockAcquisitionTimeout="15000" useLockStriping="false"/>
        <lazyDeserialization enabled="true"/>-->
        <!--  Don't ever evict modification timestamps -->
        <eviction strategy="NONE"/>
        <expiration wakeUpInterval="0"/>
        <!-- Explicitly non transactional -->
        <!--<transaction transactionMode="NON_TRANSACTIONAL"/>
        &lt;!&ndash; State transfer forces all replication calls to be synchronous,
so for calls to remain async, use a cluster cache loader instead &ndash;&gt;  -->
        <loaders passivation="false" shared="false" preload="false">
            <loader class="org.infinispan.loaders.cluster.ClusterCacheLoader"
                    fetchPersistentState="false"
                    ignoreModifications="false" purgeOnStartup="false">
                <properties>
                    <property name="remoteCallTimeout" value="20000"/>
                </properties>
            </loader>
        </loaders>
    </namedCache>

</infinispan>